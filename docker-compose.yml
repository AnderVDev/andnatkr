services:
  #new app 
  client:
    container_name: client
    image: client:1.0.0
    build:
      context: ./client
    ports:
      - "3050:80"
    volumes:
      - ${API_URI}/front.env.js:/var/www/app/config/front.env.js:ro
    networks:
      - tkr_network
    depends_on:
      - server

  server:
    container_name: server
    image: server:1.0.0
    build:
      context: .
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - tkr_network
    depends_on:
      - postgres

  postgres:
    container_name: database
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - backups:/backups
    networks:
      - tkr_network

  backup:
    container_name: backup
    image: postgres:alpine
    volumes:
      - ./backup.sh:/backup.sh:ro
      - db-data:/var/lib/postgresql/data:ro
      - backups:/backups
    environment:
      - PGHOST=${PGHOST}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
    depends_on:
      - postgres
    command: sh -c "cp /backup.sh /tmp/backup.sh && dos2unix /tmp/backup.sh && chmod +x /tmp/backup.sh && /tmp/backup.sh"
    # command: /bin/sh -c "./backup.sh"
    networks:
      - tkr_network
  # backup:
  #   container_name: postgres-backup
  #   image: postgres:alpine
  #   command: >
  #     sh -c 'pg_dump -U $POSTGRES_USER -d $POSTGRES_DB -h database > /backups/backup.sql'
  #   environment:
  #     PGUSER: ${POSTGRES_USER}
  #     PGPASSWORD: ${POSTGRES_PASSWORD}
  #     PGDATABASE: ${POSTGRES_DB}
  #   volumes:
  #     - backups:/backups
  #   networks:
  #     - tkr_network

networks:
  tkr_network:
    driver: bridge

volumes:
  db-data:
  backups:
